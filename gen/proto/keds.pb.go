// Code generated by protoc-gen-go.
// source: keds.proto
// DO NOT EDIT!

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	keds.proto

It has these top-level messages:
	PluginDescriptor
	PluginEvent
	RegisterPluginRequest
	RegisterPluginResponse
	ConsoleWriteRequest
	ConsoleWriteResponse
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/grpc-ecosystem/grpc-gateway/third_party/googleapis/google/api"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

type PluginDescriptor struct {
	Name        string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Usage       string `protobuf:"bytes,2,opt,name=usage" json:"usage,omitempty"`
	EventFilter string `protobuf:"bytes,3,opt,name=event_filter,json=eventFilter" json:"event_filter,omitempty"`
	Version     string `protobuf:"bytes,4,opt,name=version" json:"version,omitempty"`
	RootCommand string `protobuf:"bytes,5,opt,name=root_command,json=rootCommand" json:"root_command,omitempty"`
}

func (m *PluginDescriptor) Reset()                    { *m = PluginDescriptor{} }
func (m *PluginDescriptor) String() string            { return proto1.CompactTextString(m) }
func (*PluginDescriptor) ProtoMessage()               {}
func (*PluginDescriptor) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *PluginDescriptor) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PluginDescriptor) GetUsage() string {
	if m != nil {
		return m.Usage
	}
	return ""
}

func (m *PluginDescriptor) GetEventFilter() string {
	if m != nil {
		return m.EventFilter
	}
	return ""
}

func (m *PluginDescriptor) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *PluginDescriptor) GetRootCommand() string {
	if m != nil {
		return m.RootCommand
	}
	return ""
}

type PluginEvent struct {
	Name   string            `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Source string            `protobuf:"bytes,2,opt,name=source" json:"source,omitempty"`
	Data   map[string]string `protobuf:"bytes,3,rep,name=data" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *PluginEvent) Reset()                    { *m = PluginEvent{} }
func (m *PluginEvent) String() string            { return proto1.CompactTextString(m) }
func (*PluginEvent) ProtoMessage()               {}
func (*PluginEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *PluginEvent) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PluginEvent) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *PluginEvent) GetData() map[string]string {
	if m != nil {
		return m.Data
	}
	return nil
}

type RegisterPluginRequest struct {
	PluginDescriptor *PluginDescriptor `protobuf:"bytes,1,opt,name=plugin_descriptor,json=pluginDescriptor" json:"plugin_descriptor,omitempty"`
	RegisterEvents   []*PluginEvent    `protobuf:"bytes,2,rep,name=register_events,json=registerEvents" json:"register_events,omitempty"`
}

func (m *RegisterPluginRequest) Reset()                    { *m = RegisterPluginRequest{} }
func (m *RegisterPluginRequest) String() string            { return proto1.CompactTextString(m) }
func (*RegisterPluginRequest) ProtoMessage()               {}
func (*RegisterPluginRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *RegisterPluginRequest) GetPluginDescriptor() *PluginDescriptor {
	if m != nil {
		return m.PluginDescriptor
	}
	return nil
}

func (m *RegisterPluginRequest) GetRegisterEvents() []*PluginEvent {
	if m != nil {
		return m.RegisterEvents
	}
	return nil
}

type RegisterPluginResponse struct {
	Signature string `protobuf:"bytes,1,opt,name=signature" json:"signature,omitempty"`
}

func (m *RegisterPluginResponse) Reset()                    { *m = RegisterPluginResponse{} }
func (m *RegisterPluginResponse) String() string            { return proto1.CompactTextString(m) }
func (*RegisterPluginResponse) ProtoMessage()               {}
func (*RegisterPluginResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *RegisterPluginResponse) GetSignature() string {
	if m != nil {
		return m.Signature
	}
	return ""
}

type ConsoleWriteRequest struct {
	Signature string `protobuf:"bytes,1,opt,name=signature" json:"signature,omitempty"`
	Data      string `protobuf:"bytes,2,opt,name=data" json:"data,omitempty"`
}

func (m *ConsoleWriteRequest) Reset()                    { *m = ConsoleWriteRequest{} }
func (m *ConsoleWriteRequest) String() string            { return proto1.CompactTextString(m) }
func (*ConsoleWriteRequest) ProtoMessage()               {}
func (*ConsoleWriteRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ConsoleWriteRequest) GetSignature() string {
	if m != nil {
		return m.Signature
	}
	return ""
}

func (m *ConsoleWriteRequest) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

type ConsoleWriteResponse struct {
}

func (m *ConsoleWriteResponse) Reset()                    { *m = ConsoleWriteResponse{} }
func (m *ConsoleWriteResponse) String() string            { return proto1.CompactTextString(m) }
func (*ConsoleWriteResponse) ProtoMessage()               {}
func (*ConsoleWriteResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func init() {
	proto1.RegisterType((*PluginDescriptor)(nil), "proto.PluginDescriptor")
	proto1.RegisterType((*PluginEvent)(nil), "proto.PluginEvent")
	proto1.RegisterType((*RegisterPluginRequest)(nil), "proto.RegisterPluginRequest")
	proto1.RegisterType((*RegisterPluginResponse)(nil), "proto.RegisterPluginResponse")
	proto1.RegisterType((*ConsoleWriteRequest)(nil), "proto.ConsoleWriteRequest")
	proto1.RegisterType((*ConsoleWriteResponse)(nil), "proto.ConsoleWriteResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for KedsService service

type KedsServiceClient interface {
	RegisterPlugin(ctx context.Context, in *RegisterPluginRequest, opts ...grpc.CallOption) (*RegisterPluginResponse, error)
	ConsoleWriter(ctx context.Context, opts ...grpc.CallOption) (KedsService_ConsoleWriterClient, error)
	EventBus(ctx context.Context, opts ...grpc.CallOption) (KedsService_EventBusClient, error)
}

type kedsServiceClient struct {
	cc *grpc.ClientConn
}

func NewKedsServiceClient(cc *grpc.ClientConn) KedsServiceClient {
	return &kedsServiceClient{cc}
}

func (c *kedsServiceClient) RegisterPlugin(ctx context.Context, in *RegisterPluginRequest, opts ...grpc.CallOption) (*RegisterPluginResponse, error) {
	out := new(RegisterPluginResponse)
	err := grpc.Invoke(ctx, "/proto.KedsService/RegisterPlugin", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kedsServiceClient) ConsoleWriter(ctx context.Context, opts ...grpc.CallOption) (KedsService_ConsoleWriterClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_KedsService_serviceDesc.Streams[0], c.cc, "/proto.KedsService/ConsoleWriter", opts...)
	if err != nil {
		return nil, err
	}
	x := &kedsServiceConsoleWriterClient{stream}
	return x, nil
}

type KedsService_ConsoleWriterClient interface {
	Send(*ConsoleWriteRequest) error
	CloseAndRecv() (*ConsoleWriteResponse, error)
	grpc.ClientStream
}

type kedsServiceConsoleWriterClient struct {
	grpc.ClientStream
}

func (x *kedsServiceConsoleWriterClient) Send(m *ConsoleWriteRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *kedsServiceConsoleWriterClient) CloseAndRecv() (*ConsoleWriteResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ConsoleWriteResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *kedsServiceClient) EventBus(ctx context.Context, opts ...grpc.CallOption) (KedsService_EventBusClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_KedsService_serviceDesc.Streams[1], c.cc, "/proto.KedsService/EventBus", opts...)
	if err != nil {
		return nil, err
	}
	x := &kedsServiceEventBusClient{stream}
	return x, nil
}

type KedsService_EventBusClient interface {
	Send(*PluginEvent) error
	Recv() (*PluginEvent, error)
	grpc.ClientStream
}

type kedsServiceEventBusClient struct {
	grpc.ClientStream
}

func (x *kedsServiceEventBusClient) Send(m *PluginEvent) error {
	return x.ClientStream.SendMsg(m)
}

func (x *kedsServiceEventBusClient) Recv() (*PluginEvent, error) {
	m := new(PluginEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for KedsService service

type KedsServiceServer interface {
	RegisterPlugin(context.Context, *RegisterPluginRequest) (*RegisterPluginResponse, error)
	ConsoleWriter(KedsService_ConsoleWriterServer) error
	EventBus(KedsService_EventBusServer) error
}

func RegisterKedsServiceServer(s *grpc.Server, srv KedsServiceServer) {
	s.RegisterService(&_KedsService_serviceDesc, srv)
}

func _KedsService_RegisterPlugin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterPluginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KedsServiceServer).RegisterPlugin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.KedsService/RegisterPlugin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KedsServiceServer).RegisterPlugin(ctx, req.(*RegisterPluginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KedsService_ConsoleWriter_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(KedsServiceServer).ConsoleWriter(&kedsServiceConsoleWriterServer{stream})
}

type KedsService_ConsoleWriterServer interface {
	SendAndClose(*ConsoleWriteResponse) error
	Recv() (*ConsoleWriteRequest, error)
	grpc.ServerStream
}

type kedsServiceConsoleWriterServer struct {
	grpc.ServerStream
}

func (x *kedsServiceConsoleWriterServer) SendAndClose(m *ConsoleWriteResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *kedsServiceConsoleWriterServer) Recv() (*ConsoleWriteRequest, error) {
	m := new(ConsoleWriteRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _KedsService_EventBus_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(KedsServiceServer).EventBus(&kedsServiceEventBusServer{stream})
}

type KedsService_EventBusServer interface {
	Send(*PluginEvent) error
	Recv() (*PluginEvent, error)
	grpc.ServerStream
}

type kedsServiceEventBusServer struct {
	grpc.ServerStream
}

func (x *kedsServiceEventBusServer) Send(m *PluginEvent) error {
	return x.ServerStream.SendMsg(m)
}

func (x *kedsServiceEventBusServer) Recv() (*PluginEvent, error) {
	m := new(PluginEvent)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _KedsService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.KedsService",
	HandlerType: (*KedsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterPlugin",
			Handler:    _KedsService_RegisterPlugin_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ConsoleWriter",
			Handler:       _KedsService_ConsoleWriter_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "EventBus",
			Handler:       _KedsService_EventBus_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "keds.proto",
}

func init() { proto1.RegisterFile("keds.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 455 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x51, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0x65, 0xf3, 0x51, 0xc8, 0x18, 0x4a, 0x58, 0x4a, 0xb0, 0x4c, 0x90, 0x8a, 0x4f, 0x39, 0xa5,
	0x55, 0x90, 0xa0, 0x82, 0x1b, 0x4d, 0xe1, 0x00, 0x12, 0xc8, 0x1c, 0x38, 0x46, 0x4b, 0x3c, 0x58,
	0xab, 0x3a, 0xbb, 0x66, 0x77, 0x6d, 0xa9, 0x7f, 0x05, 0x71, 0xe4, 0xb7, 0xf1, 0x3b, 0x90, 0x67,
	0xed, 0xb4, 0x09, 0x86, 0xd3, 0xee, 0xbc, 0x99, 0x79, 0xf3, 0xe6, 0x0d, 0xc0, 0x25, 0xa6, 0x76,
	0x5e, 0x18, 0xed, 0x34, 0x1f, 0xd2, 0x13, 0x4d, 0x33, 0xad, 0xb3, 0x1c, 0x4f, 0x44, 0x21, 0x4f,
	0x84, 0x52, 0xda, 0x09, 0x27, 0xb5, 0x6a, 0x8a, 0xe2, 0x9f, 0x0c, 0xc6, 0x9f, 0xf2, 0x32, 0x93,
	0x6a, 0x89, 0x76, 0x6d, 0x64, 0xe1, 0xb4, 0xe1, 0x1c, 0x06, 0x4a, 0x6c, 0x30, 0x64, 0xc7, 0x6c,
	0x36, 0x4a, 0xe8, 0xcf, 0x8f, 0x60, 0x58, 0x5a, 0x91, 0x61, 0xd8, 0x23, 0xd0, 0x07, 0xfc, 0x19,
	0xdc, 0xc5, 0x0a, 0x95, 0x5b, 0x7d, 0x93, 0xb9, 0x43, 0x13, 0xf6, 0x29, 0x19, 0x10, 0xf6, 0x96,
	0x20, 0x1e, 0xc2, 0xed, 0x0a, 0x8d, 0x95, 0x5a, 0x85, 0x03, 0xca, 0xb6, 0x61, 0xdd, 0x6c, 0xb4,
	0x76, 0xab, 0xb5, 0xde, 0x6c, 0x84, 0x4a, 0xc3, 0xa1, 0x6f, 0xae, 0xb1, 0x73, 0x0f, 0xc5, 0xbf,
	0x18, 0x04, 0x5e, 0xde, 0x45, 0x4d, 0xd9, 0xa9, 0x6c, 0x02, 0x07, 0x56, 0x97, 0x66, 0xdd, 0x4a,
	0x6b, 0x22, 0x7e, 0x0a, 0x83, 0x54, 0x38, 0x11, 0xf6, 0x8f, 0xfb, 0xb3, 0x60, 0x31, 0xf5, 0x0b,
	0xcf, 0x6f, 0xb0, 0xcd, 0x97, 0xc2, 0x89, 0x0b, 0xe5, 0xcc, 0x55, 0x42, 0x95, 0xd1, 0x4b, 0x18,
	0x6d, 0x21, 0x3e, 0x86, 0xfe, 0x25, 0x5e, 0x35, 0x93, 0xea, 0x6f, 0x6d, 0x41, 0x25, 0xf2, 0x72,
	0x6b, 0x01, 0x05, 0xaf, 0x7a, 0x67, 0x2c, 0xfe, 0xc1, 0xe0, 0x51, 0x82, 0x99, 0xb4, 0x0e, 0x8d,
	0x1f, 0x90, 0xe0, 0xf7, 0x12, 0xad, 0xe3, 0x4b, 0x78, 0x50, 0x10, 0xb0, 0x4a, 0xb7, 0xfe, 0x12,
	0x67, 0xb0, 0x78, 0xbc, 0xa3, 0xe8, 0xda, 0xfe, 0x64, 0x5c, 0xec, 0x1f, 0xe4, 0x35, 0xdc, 0x37,
	0x0d, 0xfd, 0x8a, 0xbc, 0xb5, 0x61, 0x8f, 0xb6, 0xe2, 0x7f, 0x6f, 0x95, 0x1c, 0xb6, 0xa5, 0x14,
	0xda, 0xf8, 0x05, 0x4c, 0xf6, 0xb5, 0xd9, 0x42, 0x2b, 0x8b, 0x7c, 0x0a, 0x23, 0x2b, 0x33, 0x25,
	0x5c, 0x69, 0x5a, 0x4b, 0xaf, 0x81, 0xf8, 0x1d, 0x3c, 0x3c, 0xd7, 0xca, 0xea, 0x1c, 0xbf, 0x18,
	0xe9, 0xb0, 0xdd, 0xe8, 0xbf, 0x4d, 0xf5, 0x81, 0xc8, 0x74, 0x6f, 0x11, 0xfd, 0xe3, 0x09, 0x1c,
	0xed, 0x12, 0xf9, 0xf1, 0x8b, 0xdf, 0x0c, 0x82, 0xf7, 0x98, 0xda, 0xcf, 0x68, 0x2a, 0xb9, 0x46,
	0xfe, 0x11, 0x0e, 0x77, 0x85, 0xf2, 0xf6, 0x68, 0x9d, 0xde, 0x46, 0x4f, 0xff, 0x91, 0xf5, 0xf4,
	0xf1, 0x2d, 0xfe, 0x01, 0xee, 0xdd, 0x1c, 0x6c, 0x78, 0xd4, 0x74, 0x74, 0xec, 0x15, 0x3d, 0xe9,
	0xcc, 0xb5, 0x5c, 0x33, 0xc6, 0xcf, 0xe0, 0x0e, 0x39, 0xfa, 0xa6, 0xb4, 0xbc, 0xc3, 0xf7, 0xa8,
	0x03, 0xab, 0xfb, 0x4e, 0xd9, 0xd7, 0x03, 0x4a, 0x3c, 0xff, 0x13, 0x00, 0x00, 0xff, 0xff, 0xb3,
	0x9b, 0x8b, 0xf1, 0x9e, 0x03, 0x00, 0x00,
}
